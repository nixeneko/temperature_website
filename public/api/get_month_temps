#!/usr/bin/env python3
#coding: utf-8

import sys, json, datetime, os
import re
import cgi
import cgitb #for debug
#cgitb.enable() #for debug

from settings.settings import TEMP_LOG_DIR
#TEMP_LOG_DIR = "/home/pi/temperature/temp_log"
month_dir = os.path.join(TEMP_LOG_DIR, "month")

def str2month(s):
    # "2010-02" -> datetime.date(2010, 2, 1)
    m = re.match(r"^(\d{4})-(\d{2})$", s)
    if m:
        return datetime.date(int(m[1]), int(m[2]), 1)
    else:
        raise ValueError("Invalid month-format. Should be like '2021-03'.")

def last_month(date):
    firstday = datetime.date(date.year, date.month, 1)
    lastmonth = firstday + datetime.timedelta(days=-1)
    lastmonth_firstday = datetime.date(lastmonth.year, lastmonth.month, 1)
    return lastmonth_firstday

def get_json():
    result_json = {}

    form = cgi.FieldStorage()
    monthstr = datetime.date.today().strftime("%Y-%m")
    if 'month' in form:
        monthstr = form['month'].value
    result_json["month"] = monthstr
    #print(monthstr)
    month = None
    try:
        month = str2month(monthstr)
    except ValueError:
        result_json['error'] = {"message": "Invalid format string"}
        return result_json
    
    filepath = os.path.join(month_dir, monthstr+".tsv")
    if os.path.isfile(filepath):
        result_json["temperatures"] = []
        with open(filepath, "r") as f:
            for line in f:
                if not line.strip(): continue #ignore empty line
                datestr, min_temp, max_temp = line.strip().split("\t")
                result_json["temperatures"].append(
                    {"date": datestr, "min": float(min_temp), "max": float(max_temp)})
    else:
        result_json['error'] = {"message": "Not found"}
    return result_json

print("Content-Type: application/json")
print("")
print(json.dumps(get_json()))
